package com.example.study.fuctionalprogramming

/*
    ◆ 함수형 프로그래밍 ◆

    함수형 프로그래밍은 코드가 간략화되고 테스트나 재사용성이 더 좋아지면서 개발 생산성이 늘어나는
    장점이 있으며 대규모 프로그램의 설계에도 적합하다

    - 함수형 프로그래밍은 순수 함수를 작성하여 프로그램의 부작용을 줄이는 프로그래밍 기법을 말한다
    - 함수형 프로그래밍에서는 람다식과 고차 함수를 사용한다

    - 함수형 프로그래밍의 정의와 특징
    1. 순수 함수를 사용해야 한다
    2. 람다식을 사용할 수 있다
    3. 고차 함수를 사용할 수 있다다

 */

// ▶ 순수 함수 (Pure Function) ◀
// 부작용이 없는 함수가 함수 외부의 어떤 상태도 바꾸지 않는다면 순수 함수라 한다
// 순수 함수는 스레드에 사용해도 안전하고 코드를 테스트하기도 쉽다
// - 순수 함수의 조건
// 1. 같은 인자에 대하여 항상 같은 값을 반환
// 2. 함수 외부의 어떤 상태도 바꾸지 않음
fun sum(a: Int, b: Int): Int {
    return a + b    // 동일한 인자인 a, b 를 입력받아 항상 a + b 를 출력(부작용이 없음)
}


// ▶ 순수 함수가 아닌 함수 ◀
fun check() {
    //val test = User.grade() // check() 함수에 없는 외부의 User 객체를 사용
    //if (test != null) process(test) // 변수 test 는 User.grade() 의 실행 결과에 따라 달라짐
}


// ▶ 람다식 ◀
// {x, y -> x + y} ← 람다식의 예 (이름이 없는 함수 형태)
// 함수형 프로그래밍의 람다식은 다른 함수의 인자로 넘기는 함수, 함수의 결과값으로 반환하는 함수, 변수에 저장하는 함수를 말한다


// ▶ 일급 객체 ◀
// 함수형 프로그래밍에서는 함수를 일급 객체로 생각한다

// - 일급 객체의 특징
// 1. 일급객체는 함수의 인자로 전달할 수 있다
// 2. 일급객체는 함수의 반환값에 사용할 수 있다
// 3. 일급 객체는 변수에 담을 수 있다

// 만약 함수가 일급 객체면 일급 함수라고 부른다
// 그리고 일급 함수에 이름이 없는 경우 '람다식' 이라고 부를 수 있다


// ▶ 고차 함수 ◀
// 고차함수란 다른 함수를 인자로 사용하거나 함수를 결과값으로 반환하는 함수를 말한다
// 즉, 일급 객체 or 일급 함수를 서로 주고받을 수 있는 함수가 고차 함수이다
fun highFunc(sum: (Int, Int) -> Int, a: Int, b: Int): Int = sum(a, b)   // sum 매개변수는 함수

fun main() {
    println(highFunc({x, y -> x + y}, 10, 20))  // 람다식 함수를 인자로 넘김
}
// highFunc() 함수는 sum 이라는 매개변수가 있다
// sum 은 람다식 함수 형식으로 선언되어 있다
// 즉, highFunc() 함수는 sum 을 통해서 람다식 함수를 인자로 받아드릴 수 있는 고차함수다








